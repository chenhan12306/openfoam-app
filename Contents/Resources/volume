#!/bin/zsh -e

app_name="{{app_name}}"
volume_id="{{volume_id}}"

app_bundle="${0:A:h:h:h}"
dmg_file="$app_bundle/Contents/Resources/$app_name.dmg"
volume="/Volumes/$app_name"
volume_id_file="$volume/.vol_id"

print_help() {
    cat<<HELP_USAGE

Usage: ${0##*/} [OPTION] <command>

commands:
  mount             Mount the $app_name volume. Does nothing if the volume is
                    already mounted
  eject             Eject the $app_name volume

options:
  -quiet            Do not print status messages to stdout
  -force            Eject or replace the mounted volume even if it is in use
                    and/or it does not belong to this app
  -show-prefix      Print the volume mount point and exit
  -help             Print this message and exit

Manage the $app_name mountable volume (virtual disk) that contains the OpenFOAM
installation

HELP_USAGE
}

quiet=false
force=false

while [ "$#" -gt 0 ]
do
    case "$1" in
        -quiet)
            quiet=true
            shift
            ;;
        -force)
            force=true
            shift
            ;;
        -show-prefix)
            echo "$volume"
            exit 0
            ;;
        -h | -help)
            print_help
            exit 0
            ;;
        -*)
            echo "Invalid option '$1'" 1>&2
            exit 1
            ;;
        *)
            break
            ;;
    esac
done

if [ "$#" -ne 1 ]
then
    echo "A command is required" 1>&2
    exit 1
fi

case "$1" in
    mount)
        if [ -d "$volume" ]; then
            if [ ! -f "$volume_id_file" ] || [ "$volume_id" != "$(< "$volume_id_file")" ]; then
                if $force; then
                    $quiet || echo "Ejecting different volume already mounted at $volume..."
                    if ! hdiutil detach -quiet "$volume" -force; then
                        echo "ERROR: Failed to force eject a different volume at $volume" 1>&2
                        exit 1
                    fi
                else
                    echo "ERROR: A different volume is already mounted at $volume" 1>&2
                    echo "Eject the volume and try again?" 1>&2
                    exit 1
                fi
            fi
            $quiet || echo "The $app_name volume is already mounted."
        else
            $quiet || echo "Mounting the $app_name volume..."
            if ! hdiutil attach -quiet -noverify "$dmg_file"; then
                echo "ERROR: Failed to mount the $app_name volume" 1>&2
                exit 1
            fi
            if [ ! -f "$volume_id_file" ] || [ "$volume_id" != "$(< "$volume_id_file")" ]; then
                echo "ERROR: A different volume is mounted at $volume" 1>&2
                echo "Eject the volume and try again?" 1>&2
                exit 1
            fi
        fi
        $quiet || echo "You can safely eject the volume from the Finder after use."
        exit 0
        ;;
    eject)
        if [ ! -d "$volume" ]; then
            $quiet || echo "The $app_name volume is not mounted."
            exit 0
        fi
        if $force; then
            $quiet || echo "Ejecting the volume at $volume..."
            if ! hdiutil detach -quiet "$volume" -force; then
                echo "ERROR: Failed to force eject the volume at $volume" 1>&2
                exit 1
            fi
        else
            if [ ! -f "$volume_id_file" ] || [ "$volume_id" != "$(< "$volume_id_file")" ]; then
                $quiet || echo "A different volume is mounted at $volume (use -force to eject it anyway)."
                exit 0
            fi
            $quiet || echo "Ejecting the $app_name volume..."
            if ! hdiutil detach -quiet "$volume"; then
                echo "ERROR: Failed to eject the $app_name volume" 1>&2
                echo "The volume is probably in use (use -force to override)" 1>&2
                exit 1
            fi
        fi
        $quiet || echo "Done."
        exit 0
        ;;
    *)
        "Invalid command '$1'" 1>&2
        exit 1
        ;;
esac
